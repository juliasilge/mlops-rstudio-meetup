---
title: "Version, deploy, and monitor your model with vetiver in R"
---


```{r}
#| echo: false
#| eval: false

## data from TidyTuesday: https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-07-13/readme.md

library(tidyverse)
library(arrow)
scooby_raw <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-07-13/scoobydoo.csv')

scooby_raw %>%
  mutate(
    imdb = parse_number(imdb),
    year_aired = lubridate::year(date_aired)
  ) %>%
  filter(monster_amount > 0, !is.na(imdb)) %>%
  mutate(
    monster_real = case_when(
      monster_real == "FALSE" ~ "fake",
      TRUE ~ "real"
    ),
    monster_real = factor(monster_real)
  ) %>%
  select(monster_real, year_aired, imdb, title) %>%
  write_feather("scooby-do.arrow")

crossing(
  year_aired = 2022:2030,
  imdb = seq(from = 5, to = 9, by = 0.5),
  monster_real = as.factor(c("fake", "real"))
) %>%
  slice_sample(n = 40)  %>%
  write_feather("scooby-validation.arrow")

```

## The MLOps cycle

![](https://vetiver.rstudio.com/images/ml_ops_cycle.png)

Data scientists have effective tools that they ‚ù§Ô∏è to:

-   collect data

-   prepare, manipulate, refine data

-   train models

There is a lack üò© of effective tools (especially open source) to:

-   put models into production

-   monitor model performance

-   trigger retraining

## What is vetiver? <https://vetiver.rstudio.com/>

> *Vetiver, the oil of tranquility, is used as a stabilizing ingredient in perfumery to preserve more volatile fragrances.*

The **goal** of vetiver is to provide fluent tooling to **version, deploy, and monitor** a trained model.


## Build a model

Let's build a model to predict which [Scooby Doo episodes](https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-07-13/readme.md) have a _real_ monster and which have a _fake_ monster.

```{r}
library(tidyverse)
library(arrow)
scooby <- read_feather("scooby-do.arrow")

scooby
```

```{r}
library(tidymodels)
svm_spec <- svm_rbf(mode = "classification")
scooby_rec <- 
  recipe(monster_real ~ year_aired + imdb, data = scooby) %>%
  step_normalize(all_numeric_predictors())
svm_fit <-
  workflow(scooby_rec, svm_spec) %>%
  fit(scooby)
```

Data scientists use tools they love for these steps, like the tidyverse, pandas, tidymodels, scikit-learn, etc.

## Version and deploy a model

Create a deployable model object:

```{r}
library(vetiver)
v <- vetiver_model(svm_fit, "scooby-doo")
v
```

Version and share the model:

```{r}
library(pins)
model_board <- board_rsconnect() ## also support board_s3(), board_azure(), etc
model_board %>% vetiver_pin_write(v)
```

Document the model: <https://vetiver.rstudio.com/learn-more/model-card.html>

Deploy model as a REST API:

```{r}
library(plumber)
pr() %>%
  vetiver_api(v, debug = TRUE)
```

- Deploy to Connect: <https://rstudio.github.io/vetiver-r/dev/reference/vetiver_deploy_rsconnect.html>

- Deploy via Docker (after creating plumber file via `vetiver_write_plumber(model_board, "julia.silge/scooby-doo")`):

```{r}
#| eval: false
vetiver_write_docker(v)
```

Build the Docker container (from command line):

```{bash}
#| eval: false
docker build --platform linux/amd64 -t scooby-doo .
```

Run the Docker container  (from command line):

```{bash}
#| eval: false
docker run --env-file .Renviron --rm -p 8000:8000 scooby-doo
```

## Predict from a model

Predict for remote vetiver model:

```{r}
#| eval: false
scooby_endpoint <- vetiver_endpoint("http://127.0.0.1:8080/predict")
scooby_endpoint
```

```{r}
new_episodes <- tidyr::crossing(
  year_aired = sample(1970:2000, size = 3),
  imdb = sample(5:9, size = 3)
)
new_episodes
```

```{r}
#| eval: false
predict(scooby_endpoint, new_episodes)
```

## Monitor your model

```{r}
scooby_validation <- read_feather("scooby-validation.arrow")
scooby_validation
```

